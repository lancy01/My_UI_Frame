pytest.ini pytest的主配置文件，可以改变pytest的默认行为
pytest 配置文件可以改变 pytest 的运行方式，它是一个固定的文件 pytest.ini 文件，读取配置信息，按指定的方式去运行。
pytest-cov==2.10.0插件计算单元测试代码覆盖率

# pytest.ini
[pytest]

markers =
  webtest:  Run the webtest case
  hello: Run the hello case
#多cpu并行执行用例，直接加个-n参数即可，后面num参数就是并行数量，比如num设置为3
#-n auto 自动侦测系统里的CPU数目,-n num 指定运行测试的处理器进程数
--cov：针对指定测试用例目录进行覆盖率计算
addopts = -v -s --alluredir ../../../report-results -n=1 --reruns=1 --cov=../../test_suite/test_pro

# This tells pytest to only look for tests in testing and doc directories
# when executing from the root directory.
testpaths
设置当从rootdir目录执行pytest时，在命令行中未给出特定目录，文件或测试ID的情况下，应搜索测试的目录列表。
当所有项目测试都在已知位置时很有用，以加快测试收集速度，并避免意外搜索不需要的测试。
testpaths = ./src/test_suite/test_pro
             tests
             integration

一种或多种Glob样式的文件模式，可将哪些python文件视为测试模块。通过在模式之间添加空格来搜索多个全局模式：
    [pytest]
    python_files = test_*.py check_*.py example_*.py
或每行一个：
    [pytest]
    python_files =
        test_*.py
        check_*.py
        example_*.py
默认情况下，匹配的文件test_*.py和*_test.py将被视为测试模块。
python_files = test_*.py

# 个或多个名称前缀或全局样式模式，确定要考虑哪些类进行测试收集。通过在模式之间添加空格来搜索多个glob模式。默认情况下，
# pytest会将带有前缀的任何类Test视为测试集合。这是一个如何从以结尾的类中收集测试的示例Suite：
python_classes = Test*

确定将哪些测试功能和方法视为测试的一个或多个名称前缀或全局模式。通过在模式之间添加空格来搜索多个glob模式。默认情况下，
pytest会将带前缀的任何功能test视为测试。这是一个如何收集以结尾的测试函数和方法的示例_test：
python_functions = test_*

# will fail if we run with pytest-2.8
# 指定运行测试所需的最低pytest版本。
minversion = 5.0
# The specified directory is ignored and will not be scanned to read the specified directory
# 设置目录基名称模式，以避免在递归进行测试发现时使用。单个（fnmatch样式）模式应用于目录的基名，以决定是否递归到该目录中。模式匹配字符：
# 默认模式为。设置a 将替换默认值。这是如何避免某些目录的示例：'.*', 'build', 'dist', 'CVS', '_darcs', '{arch}', '*.egg', 'venv'norecursedirs
norecursedirs = .svn .git _build tmp*

# xfail_strict,如果设置为True，则标记为@pytest.mark.xfail实际成功的测试默认情况下将使测试套件失败。
# xfail_strict=true

usefixtures
适用于所有测试功能的灯具清单；将@pytest.mark.usefixtures标记应用于所有测试功能在语义上是相同的。
usefixtures =
    clean_db

required_plugins
用空格分隔的插件列表，必须存在这些插件才能运行pytest。插件名称后可以直接列出带有或不带有版本说明符的插件。
不允许在不同版本说明符之间使用空格。如果找不到任何一个插件，则发出错误。
required_plugins = pytest-django>=3.0.0,<4.0.0 pytest-html pytest-xdist>=1.0.0


addopts
将指定的内容添加OPTS到命令行参数集中，就好像用户已经指定了它们一样。示例：如果您具有此ini文件内容：
# content of pytest.ini
[pytest]
addopts = --maxfail=2 -rf  # exit after 2 failures, report fail info
发行实际上意味着：pytest test_hello.py
pytest --maxfail=2 -rf test_hello.py
默认为不添加任何选项。

cache_dir
设置用于存储缓存插件内容的目录。默认目录是 .pytest_cache在rootdir中创建的。目录可以是相对或绝对路径。如果设置相对路径，则相对于rootdir创建目录。
另外，路径可能包含将被扩展的环境变量。有关缓存插件的更多信息，请参阅Cache：使用交叉测试运行状态。

confcutdir
设置conftest.py停止向上搜索文件的目录。默认情况下，pytest将停止conftest.py从项目的pytest.ini/ tox.ini/ 向上搜索文件（setup.cfg如果有的话），或者直到文件系统根目录。

console_output_style
在运行测试时设置控制台输出样式：

classic：经典的pytest输出。
progress：类似于经典的pytest输出，但带有进度指示器。
count：类似于进度，但显示的进度是已完成的测试数量而不是百分比。
默认值为progress，但是classic如果您愿意或者新模式会导致意外问题，则可以回退至：

# content of pytest.ini
[pytest]
console_output_style = classic
doctest_encoding
用于对带有文档字符串的文本文件进行解码的默认编码。 查看pytest如何处理doctests。

doctest_optionflags
标准doctest模块中的一个或多个doctest标志名称。 查看pytest如何处理doctests。

empty_parameter_set_mark
允许为参数化中的空参数集选择操作

skip 跳过带有空参数集的测试（默认）
xfail 将具有空参数集的测试标记为xfail（run = False）
fail_at_collect 如果参数收集了空参数集，则会引发异常
# content of pytest.ini
[pytest]
empty_parameter_set_mark = xfail
注意
该选项的默认值计划xfail在将来的版本中更改为该值，因为它被认为不太容易出错， 有关更多详细信息，请参见＃3155。

faulthandler_timeout
如果测试花费的时间超过X几秒钟（包括夹具设置和拆卸），则转储所有线程的回溯。使用faulthandler.dump_traceback_later函数实现，因此所有警告均适用。

# content of pytest.ini
[pytest]
faulthandler_timeout=5
有关更多信息，请参考Fault Handler。

filterwarnings
设置匹配警告应采取的过滤器和操作的列表。默认情况下，在测试会话期间发出的所有警告将在测试会话结束时的摘要中显示。

# content of pytest.ini
[pytest]
filterwarnings =
    error
    ignore::DeprecationWarning
这告诉pytest忽略弃用警告，并将所有其他警告变成错误。有关更多信息，请参阅警告捕获。

junit_duration_report
版本4.1中的新功能。

配置持续时间如何记录到JUnit XML报告中：

total （默认值）：报告的持续时间包括设置，通话和拆卸时间。
call：报告的持续时间仅包括通话时间，不包括设置和拆卸时间。
[pytest]
junit_duration_report = call
junit_family
4.2版的新功能。

配置生成的JUnit XML文件的格式。可能的选项是：

xunit1（或legacy）：生成旧样式的输出，与xunit 1.0格式兼容。这是默认值。
xunit2：产生xunit 2.0样式的输出，
应该与最新的Jenkins版本兼容。
[pytest]
junit_family = xunit2
junit_logging
3.5版的新功能。

改变在5.4版：log，all，out-err选择添加。

配置是否将捕获的输出写入JUnit XML文件。有效值为：

log：仅写入logging捕获的输出。
system-out：写入捕获的stdout内容。
system-err：写入捕获的stderr内容。
out-err：写两种捕捉stdout和stderr内容。
all：写捕获logging，stdout和stderr内容。
no （默认）：不写入捕获的输出。
[pytest]
junit_logging = system-out
junit_log_passing_tests
4.6版的新功能。

如果为，则配置是否应将捕获的输出写入JUnit XML文件以通过测试。默认值为。junit_logging != "no"True

[pytest]
junit_log_passing_tests = False
junit_suite_name
要设置根测试套件xml项的名称，可以junit_suite_name在配置文件中配置该选项：

[pytest]
junit_suite_name = my_suite
log_auto_indent
允许选择性地自动缩进多行日志消息。

支持命令行选项 和配置选项，以设置所有日志记录的自动缩进行为。--log-auto-indent [value]log_auto_indent = [value]

[value] 可：
True或“ On”-动态自动缩进多行日志消息
False或“ Off”或0-不自动缩进多行日志消息（默认行为）
[正整数]-通过[值]空格自动缩进多行日志消息
[pytest]
log_auto_indent = False
支持将kwarg传递给调用以为日志中的特定条目指定自动缩进行为。kwarg会覆盖在命令行或配置中指定的值。extra={"auto_indent": [value]}logging.log()extra

log_cli
在测试运行期间启用日志显示（也称为“实时日志记录”）。默认值为False。

[pytest]
log_cli = True
log_cli_date_format
设置time.strftime()兼容格式的字符串，该格式将在格式化实时日志记录的日期时使用。

[pytest]
log_cli_date_format = %Y-%m-%d %H:%M:%S
有关更多信息，请参见实时日志。

log_cli_format
设置logging用于格式化实时日志消息的-compatible字符串。

[pytest]
log_cli_format = %(asctime)s %(levelname)s %(message)s
有关更多信息，请参见实时日志。

log_cli_level
设置实时日志应捕获的最低日志消息级别。可以使用整数值或级别名称。

[pytest]
log_cli_level = INFO
有关更多信息，请参见实时日志。

log_date_format
设置一个time.strftime()兼容的字符串，该格式将在格式化日志记录捕获的日期时使用。

[pytest]
log_date_format = %Y-%m-%d %H:%M:%S
有关更多信息，请参见记录。

log_file
设置相对于pytest.ini应写入日志消息的文件的文件名，以及其他活动的日志记录工具。

[pytest]
log_file = logs/pytest-logs.txt
有关更多信息，请参见记录。

log_file_date_format
设置一个time.strftime()兼容的字符串，该格式将在格式化日志文件的日期时使用。

[pytest]
log_file_date_format = %Y-%m-%d %H:%M:%S
有关更多信息，请参见记录。

log_file_format
设置logging-compatible字符串，用于格式化重定向到日志文件的日志消息。

[pytest]
log_file_format = %(asctime)s %(levelname)s %(message)s
有关更多信息，请参见记录。

log_file_level
设置应该为日志文件捕获的最小日志消息级别。可以使用整数值或级别名称。

[pytest]
log_file_level = INFO
有关更多信息，请参见记录。

log_format
设置logging-compatible字符串，用于格式化捕获的日志消息。

[pytest]
log_format = %(asctime)s %(levelname)s %(message)s
有关更多信息，请参见记录。

log_level
设置日志记录捕获应捕获的最低日志消息级别。可以使用整数值或级别名称。

[pytest]
log_level = INFO
有关更多信息，请参见记录。

log_print
如果设置为False，将禁用为失败的测试显示捕获的日志消息。

[pytest]
log_print = False
有关更多信息，请参见记录。